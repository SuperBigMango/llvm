#include "llvm/Pass.h"
#include "llvm/Function.h"
#include "llvm/BasicBlock.h"
#include "llvm/Module.h"
#include "llvm/Type.h"
#include "llvm/Constants.h"
#include "llvm/Instructions.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#include <vector>
#include <string>
#include <iostream>
#include <stdint.h>
using namespace std;

namespace {

	class IRModification:public FunctionPass {
		public:
			static char ID;
			IRModification();
			virtual bool runOnFunction(Function&);
	};

	IRModification::IRModification():FunctionPass(ID) {}

	bool IRModification::runOnFunction(Function& func) {

		errs()<<"Function name is  "<<func.getName()<<"\n";
		for(Function::iterator bBlock = func.begin() ; bBlock != func.end() ; ++bBlock) {
			errs() <<bBlock->getName() <<"\n";
		}
		Module* module = func.getParent();
		PointerType* Int8Ptr = PointerType::get(Type::getInt8Ty(module->getContext()),0);
		Constant* hook = module->getOrInsertFunction("hook",
				Type::getVoidTy(module->getContext()),
				Int8Ptr,
				(Type*)0
				);

		Function* hookFunction = cast<Function>(hook);
		vector<Value*> arglist;                                                         
		Constant* charArray = ConstantDataArray::getString(module->getContext(),"arijit",true);
		arglist.push_back(charArray);
                



                GetElementPtrInst* gInst = GelElementPtrInst::Create(charArray,);

	        Instruction* hookInstruction = CallInst::Create(hookFunction,arglist,"");
	         for(BasicBlock *bBlock = func.begin(); bBlock != func.end() ; ++bBlock) {
	         	Instruction* termInst = bBlock->getTerminator();
	         	hookInstruction->insertBefore(termInst);
	         }
		return true;
	}
}


char IRModification::ID=0;
static RegisterPass<IRModification> M("modify","This is a test pass",false,false);
