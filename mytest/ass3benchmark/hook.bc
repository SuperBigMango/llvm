; ModuleID = 'hook.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.MemListNode = type { i8*, i64, %struct.MemList* }
%struct.MemList = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@tail = internal global %struct.MemListNode* null, align 8
@head = internal global %struct.MemListNode* null, align 8
@counter = internal global i64 0, align 8
@stderr = external global %struct._IO_FILE*
@.str = private unnamed_addr constant [21 x i8] c"MemoryFootPrint %lu\0A\00", align 1

define void @malloc_hook(i8* %mem, i64 %size) nounwind uwtable {
entry:
  %mem.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %node = alloca %struct.MemListNode*, align 8
  store i8* %mem, i8** %mem.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %call = call noalias i8* @malloc(i64 24) nounwind
  %0 = bitcast i8* %call to %struct.MemListNode*
  store %struct.MemListNode* %0, %struct.MemListNode** %node, align 8
  %1 = load i8** %mem.addr, align 8
  %2 = load %struct.MemListNode** %node, align 8
  %mem1 = getelementptr inbounds %struct.MemListNode* %2, i32 0, i32 0
  store i8* %1, i8** %mem1, align 8
  %3 = load i64* %size.addr, align 8
  %4 = load %struct.MemListNode** %node, align 8
  %size2 = getelementptr inbounds %struct.MemListNode* %4, i32 0, i32 1
  store i64 %3, i64* %size2, align 8
  %5 = load %struct.MemListNode** %node, align 8
  %next = getelementptr inbounds %struct.MemListNode* %5, i32 0, i32 2
  store %struct.MemList* null, %struct.MemList** %next, align 8
  %6 = load %struct.MemListNode** @tail, align 8
  %cmp = icmp eq %struct.MemListNode* %6, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load %struct.MemListNode** %node, align 8
  store %struct.MemListNode* %7, %struct.MemListNode** @tail, align 8
  %8 = load %struct.MemListNode** %node, align 8
  store %struct.MemListNode* %8, %struct.MemListNode** @head, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %9 = load %struct.MemListNode** %node, align 8
  %10 = bitcast %struct.MemListNode* %9 to %struct.MemList*
  %11 = load %struct.MemListNode** @tail, align 8
  %next3 = getelementptr inbounds %struct.MemListNode* %11, i32 0, i32 2
  store %struct.MemList* %10, %struct.MemList** %next3, align 8
  %12 = load %struct.MemListNode** @tail, align 8
  %next4 = getelementptr inbounds %struct.MemListNode* %12, i32 0, i32 2
  %13 = load %struct.MemList** %next4, align 8
  %14 = bitcast %struct.MemList* %13 to %struct.MemListNode*
  store %struct.MemListNode* %14, %struct.MemListNode** @tail, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load i64* %size.addr, align 8
  %16 = load i64* @counter, align 8
  %add = add nsw i64 %16, %15
  store i64 %add, i64* @counter, align 8
  %17 = load %struct._IO_FILE** @stderr, align 8
  %18 = load i64* @counter, align 8
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([21 x i8]* @.str, i32 0, i32 0), i64 %18)
  ret void
}

declare noalias i8* @malloc(i64) nounwind

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...)

define void @free_hook(i8* %mem) nounwind uwtable {
entry:
  %mem.addr = alloca i8*, align 8
  %n = alloca %struct.MemListNode*, align 8
  store i8* %mem, i8** %mem.addr, align 8
  %0 = load %struct.MemListNode** @head, align 8
  store %struct.MemListNode* %0, %struct.MemListNode** %n, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.MemListNode** %n, align 8
  %cmp = icmp ne %struct.MemListNode* %1, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.MemListNode** %n, align 8
  %mem1 = getelementptr inbounds %struct.MemListNode* %2, i32 0, i32 0
  %3 = load i8** %mem1, align 8
  %4 = load i8** %mem.addr, align 8
  %cmp2 = icmp eq i8* %3, %4
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %5 = load %struct.MemListNode** %n, align 8
  %next = getelementptr inbounds %struct.MemListNode* %5, i32 0, i32 2
  %6 = load %struct.MemList** %next, align 8
  %7 = bitcast %struct.MemList* %6 to %struct.MemListNode*
  store %struct.MemListNode* %7, %struct.MemListNode** %n, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %8 = load %struct.MemListNode** %n, align 8
  %cmp3 = icmp ne %struct.MemListNode* %8, null
  br i1 %cmp3, label %if.then4, label %if.end5

if.then4:                                         ; preds = %for.end
  %9 = load %struct.MemListNode** %n, align 8
  %size = getelementptr inbounds %struct.MemListNode* %9, i32 0, i32 1
  %10 = load i64* %size, align 8
  %11 = load i64* @counter, align 8
  %sub = sub nsw i64 %11, %10
  store i64 %sub, i64* @counter, align 8
  %12 = load %struct._IO_FILE** @stderr, align 8
  %13 = load i64* @counter, align 8
  %call = call i32 (%struct._IO_FILE*, i8*, ...)* @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([21 x i8]* @.str, i32 0, i32 0), i64 %13)
  br label %if.end5

if.end5:                                          ; preds = %if.then4, %for.end
  ret void
}
